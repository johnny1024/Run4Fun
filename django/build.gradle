plugins {
    id "com.linkedin.python-cli" version "0.4.9"
}

dependencies {
    python 'pypi:Django:1.11'
}

repositories {
    pyGradlePyPi()
    ivy {
        url "${projectDir}/repo"
        layout 'pattern' , {
            artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
            ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
        }
    }
}

python {
    docsDir = project.file('docs').path // The location of this project's Sphinx documentation directory
    testDir = project.file('tests').path // The location of this project's tests directory.
    srcDir = project.file('repo').path // The location of this project's source directory.
    pinnedFile = project.file('pinned.txt') // A file generated by the build for pip install to consume in no pygradle builds

    details {
        virtualEnvPrompt = "(${project.name})"
        activateLink = project.file("activate") // File you can source to activate the virtual env
//        pythonVersion = '2.7' // Sets the version of python to use, will search your PATH to get the location
//        systemPythonInterpreter = file("/path/to/python2.7") // used to force an interpreter to be used to build the venv
    }
}

def createVenvExecTask(taskName, command) {
    return tasks.create("${taskName}", Exec) {
        workingDir projectDir
        commandLine 'bash', '-c', "source activate && ${command}"
        group = 'own'
    }
}

def createExecTask(taskName, command) {
    return tasks.create("${taskName}", Exec) {
        workingDir projectDir
        commandLine 'bash', '-c', command
        group = 'own'
    }
}

createVenvExecTask('runServer', "./manage.py runserver & echo \$! > ${projectDir}/PID")
createVenvExecTask('runTests', './manage.py test')
createExecTask('killServer', "pkill python") // Kills all python processes, not only the server one
//createExecTask('killServer', "kill -- -\$(ps -o pgid= \"\$(< ${projectDir}/PID)\" | grep -o '[0-9]*')")
createExecTask('_runServer', "./manage.py runserver & echo \$! > ${projectDir}/PID")
createExecTask('_runTests', './manage.py test')

[runServer, runTests].each { task -> task.dependsOn build }

installProject.enabled = false
buildWheels.enabled = false
buildPex.enabled = false
flake8.enabled = false
pytest.enabled = false
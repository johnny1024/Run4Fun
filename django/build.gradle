plugins {
    id "com.linkedin.python-cli" version "0.4.9"
}

dependencies {
    python 'pypi:Django:1.11'
    python 'pypi:pytest-django:3.1.2'
    python 'pypi:pdoc:0.3.2'
    python 'pypi:Mako:1.0.6'
    python 'pypi:MarkupSafe:0.9.2'
    python 'pypi:Markdown:2.6.8'
    python 'pypi:mock:2.0.0'
    python 'pypi:psycopg2:2.7.1'
}

repositories {
    pyGradlePyPi()
    ivy {
        url "${projectDir}/repo"
        layout 'pattern' , {
            artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
            ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
        }
    }
}

python {
    testDir = project.file('tests').path // The location of this project's tests directory.
    srcDir = project.file('repo').path // The location of this project's source directory.
    pinnedFile = project.file('pinned.txt') // A file generated by the build for pip install to consume in no pygradle builds

    details {
        virtualEnvPrompt = "(${project.name})"
        activateLink = project.file('activate') // File you can source to activate the virtual env
        systemPythonInterpreter = file('/usr/bin/python3') // used to force an interpreter to be used to build the venv
    }
}

def createVenvExecTask(taskName, command) {
    return tasks.create("${taskName}", Exec) {
        workingDir projectDir
        commandLine 'bash', '-c', "source activate && ${command}"
        group = 'own'
    }
}

def createExecTask(taskName, command) {
    return tasks.create("${taskName}", Exec) {
        workingDir projectDir
        commandLine 'bash', '-c', command
        group = 'own'
    }
}

createVenvExecTask('runServer', "(python -u manage.py runserver & echo \$! > ${projectDir}/server.pid) &> server.log")
createVenvExecTask('runServerFg', "(python -u manage.py runserver & echo \$! > ${projectDir}/server.pid) |& tee server.log")
createVenvExecTask('runTests', "py.test --junitxml ${projectDir}/test_results.xml")
createVenvExecTask('genDoc', "pdoc --html-dir ${buildDir}/docs --overwrite --html run4fun &&" +
                             "pdoc --html-dir ${buildDir}/docs --overwrite --html hello")

createExecTask('killServer', "pkill -x python") // Kills all python processes, not only the server one
//createExecTask('killServer', "kill -- -\$(ps -o pgid= \"\$(< ${projectDir}/server.pid)\" | grep -o '[0-9]*')")

[runServer, runServerFg, runTests, genDoc].each { task -> task.dependsOn assemble }

installProject.enabled = false
buildWheels.enabled = false
buildPex.enabled = false
flake8.enabled = false
buildDocsHtml.enabled = false
buildDocsJson.enabled = false